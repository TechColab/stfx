#!/usr/bin/vi
# 
# stfx.config - sample template for site-specific customised routines.
# Copyright (C) 2014 Phill W.J. Rogers
# PhillRogers_at_JerseyMail.co.uk
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# 

# Please see stfx.sh for more info.
# Consider:
#		add more I/O: 433MHz, 17.5-18.5kHz, PiFm, espeak/festival
#

repeats=off
vlc_http_password=$(awk -F= '/http-password/{print $2}' public/VLCPortable/Data/settings/vlcrc)

fn_init() {
	# set all interfaces to initial state
	gpio load i2c
	gpio load spi
	./led_strip_grey 0 >/dev/null
	p=25 ; gpio -g mode $p out ; gpio -g write $p 0
	p=4 ; gpio -g mode $p out ; gpio -g write $p 0
	amixer cset numid=3 1 > /dev/null 2>&1 # force effects sounds to analogue
	./led_strip_grey 0 >/dev/null
	ps -ef | egrep -q "servo[d]" || sudo servod --pcm --p1pins=12 # uses GPIO18
	sudo sh -c "TERM=linux setterm -foreground black >/dev/tty0"
	sudo sh -c "TERM=linux setterm -cursor off -clear >/dev/tty0"
	cat /dev/zero > /dev/fb0 2>/dev/null
}

fn_cleanup() {
	# set all interfaces to clean state
	./led_strip_grey 0 >/dev/null
	p=25 ; gpio -g write $p 0 ; mode $p in ; gpio unexport $p
	p=4 ; gpio -g write $p 0 ; mode $p in ; gpio unexport $p
	cat /dev/zero > /dev/fb0 2>/dev/null
	sudo sh -c "TERM=linux setterm -foreground white -cursor on -clear >/dev/tty0"
	# rm -f *.jpg *.cache
}

fn_action() {
	set $*
	# printf "=>%s<=\n" "$*" >> debug.log

	if [ "$1" = "secondscreen" ] ; then
    # write directly to frame buffer using pre-cached blobs as its the only way fast enough
		if [ "$2" = "image" ] ; then
			# secondscreen image seconds MyImage.jpg
			s=$3
			f=cache/image-"${4}".fb
			[ -f "${f}" ] && ( cat "${f}" > /dev/fb0 ; sleep $s ; cat /dev/zero > /dev/fb0 2>/dev/null ) &
		fi
		if [ "$2" = "text" ] ; then
			# secondscreen text seconds Meanwhile, back in Sanfrancisco!
			s=$3 ; shift ; shift ; shift ; m="$*"
			(
				f=cache/text-$(echo $m | cksum | cut -d' ' -f1).fb
				[ -f "${f}" ] && ( cat "${f}" > /dev/fb0 ; sleep $s ; cat /dev/zero > /dev/fb0 2>/dev/null )
			) &
		fi
	fi

	if [ "$1" = "spoons" ] ; then
		p=4; gpio -g mode $p out; l=$(expr $2 + $(date +"%s"))
		while expr $(date +"%s") \<= $l >/dev/null; do gpio -g write $p 1; sleep 0.4; gpio -g write $p 0; sleep 0.2; done &
	fi

	if [ "$1" = "beep" ] ; then
		loop=$(expr 0 + $2)
		while expr $loop \> 0 >/dev/null ; do
		( p=25 ; gpio -g mode $p out; gpio -g write $p 1; sleep 0.1; gpio -g write $p 0 )
		loop=$(expr $loop - 1)
		done &
	fi

	if [ "$1" = "aerosol" ] ; then
		p=18; gpio -g mode $p out;
		# send PWM to servo to depress the aerosol
		( echo "0=170" > /dev/servoblaster ; sleep $2 ; echo "0=130" > /dev/servoblaster ) &
	fi

	if [ "$1" = "aerosol-test" ] ; then
		p=18; gpio -g mode $p out;
		# send PWM to servo to just wave and not depress the aerosol
		( echo "0=100" > /dev/servoblaster ; sleep $2 ; echo "0=130" > /dev/servoblaster ) &
	fi

	if [ "$1" = "leds" ] ; then
		if [ "$2" = "grey" ] ; then
			./led_strip_grey $3 &
		fi
		[ "$2" = "fuzz" ] && ./led_strip_car-fuzz1 &
		[ "$2" = "plod" ] && ./led_strip_car-plod1 &
		[ "$2" = "knightrider" ] && ./led_strip_car-knightrider &
	fi

	if [ "$1" = "subwoofer" ] ; then
		play -q -n synth $2 sin 34 fade t 1 0 1 2>/dev/null &
	fi

	if [ "$1" = "fan" ] ; then
		( p=22; gpio -g mode $p out; gpio -g write $p 1; sleep $2; gpio -g write $p 0 ) &
	fi

	if [ "$1" = "raspistill" ] ; then
    (
			ts=$(date +"%Y%m%d-%H%M%S")
			raspistill -o $ts.jpg -w 1920 -h 1080 -q 100 -t 1 -n
    ) &
	fi

	if [ "$1" = "raspivid" ] ; then
    (
			ts=$(date +"%Y%m%d-%H%M%S")
			ms=$(expr 1000 \* $2)
			raspivid -o $ts.mp4 -n -t $ms 2>/dev/null
    ) &
	fi

	if [ "$1" = "repeats" ] ; then
		[ "$2" = "on" ] && repeats=on
		[ "$2" = "off" ] && repeats=off
	fi

}

